@page "/videogame"
@page "/videogame/{id:int}"
@using System.ComponentModel.DataAnnotations
@inject IGameService GameService

 @if(Id == null)
{
    <h3>Create a new video game</h3>
}
else
{
    <h3>Edit "@game.Name"</h3>
}
<EditForm Model="@game" OnSubmit="@HandleSubmit">
    <DataAnnotationsValidator />
    <ValidationSummary />
    <div>
        <label for="name">Name</label>
        <InputText id="name" @bind-Value="game.Name" class="form-control" tabindex="1"></InputText>
    </div>
    <div>
        <label for="developer">Developer</label>
        <InputText id="developer" @bind-Value="game.Developer" class="form-control" tabindex="2"></InputText>
    </div>
    <div>
        <label for="release">Relaese</label>
        <InputDate id="release" @bind-Value="game.Release" class="form-control" tabindex="3"></InputDate>
    </div>

    <br />
    <div class="buttonsOfEditPage">
        <button type="submit" class="btn btn-success">@btnText</button>

        @if (Id != null)
        {
            <button type="button" class="btn btn-danger" @onclick="DeleteGame">Delete Game</button>
        }
    </div>  
</EditForm>


@code {
   
    [Parameter]
    public int? Id { get; set;}

    string btnText = string.Empty;

    Game game = new Game();

    protected override void OnInitialized()
    {
        btnText = Id == null ? "Create New Game" : "Edit Game";
    }

    protected override async Task OnParametersSetAsync()
    {

        if (Id != null)
        {
            game = await GameService.GetSingleGame((int)Id);
        }

    }

    async Task HandleSubmit()
    {
       
        
        if(Id == null)
        {
            await GameService.CreateGame(game);
        }
        else
        {
            await GameService.UpdateGame(game, (int)Id);
        }
        
    }

    async Task DeleteGame()
    {

           await GameService.DeleteGame(game.Id);
       
    }
}
